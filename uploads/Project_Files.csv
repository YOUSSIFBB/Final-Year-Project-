Filename,Content
app.py,"
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from models import initialize_user_db, register_user, authenticate_user
import os
import sqlite3
import nmap
from flask_cors import CORS
import requests
import time
import hashlib

app = Flask(__name__)
app.secret_key = 'My_secret_key'
app.config['UPLOAD_FOLDER'] = os.path.join(os.getcwd(), 'uploads')
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
CORS(app)

VT_API_KEY = ""YOUR_VIRUSTOTAL_API_KEY""

initialize_user_db()
DATABASE_PATH = os.path.join(""databaseF"", ""scan_results.db"")
if not os.path.exists(DATABASE_PATH):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE results (id INTEGER PRIMARY KEY, target TEXT, scan_output TEXT)''')
    conn.commit()
    conn.close()

def get_file_hashes(filepath):
    hashes = {'md5': hashlib.md5(), 'sha1': hashlib.sha1(), 'sha256': hashlib.sha256()}
    with open(filepath, 'rb') as f:
        while chunk := f.read(8192):
            for h in hashes.values():
                h.update(chunk)
    return {k: v.hexdigest() for k, v in hashes.items()}

@app.route('/')
def home():
    if 'user' in session:
        return render_template('index.html', user=session['user'])
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = authenticate_user(username, password)
        if user:
            session['user'] = username
            flash('Welcome back!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Invalid username or password!', 'error')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if register_user(username, password):
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('login'))
        else:
            flash('Username already exists!', 'error')
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.pop('user', None)
    flash('You have been logged out.', 'success')
    return redirect(url_for('login'))

@app.route('/scan')
def scan_page():
    if 'user' not in session:
        flash('Please log in to access this feature.', 'error')
        return redirect(url_for('login'))
    return render_template('scan.html')

@app.route('/trafficMonitor')
def vscan_page():
    return render_template('trafficMonitor.html')

@app.route('/nmap-scan', methods=['POST'])
def nmap_scan():
    if 'user' not in session:
        return jsonify({'success': False, 'error': 'Unauthorized. Please log in.'}), 401
    target = request.json.get('target', '127.0.0.1')
    nm = nmap.PortScanner()
    try:
        nm.scan(hosts=target, arguments='-sV')
        scan_results = []
        for host in nm.all_hosts():
            host_info = {
                'host': host,
                'status': nm[host].state(),
                'protocols': []
            }
            for protocol in nm[host].all_protocols():
                ports = []
                for port in nm[host][protocol].keys():
                    ports.append({
                        'port': port,
                        'state': nm[host][protocol][port]['state'],
                        'service': nm[host][protocol][port]['name']
                    })
                host_info['protocols'].append({'protocol': protocol, 'ports': ports})
            scan_results.append(host_info)
        return jsonify({'success': True, 'results': scan_results})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/capturePackets', methods=['GET'])
def capture_packets():
    from scapy.all import sniff
    def packet_to_dict(pkt):
        return {
            ""protocol"": pkt.summary().split("" "")[0],
            ""source"": pkt.src if hasattr(pkt, ""src"") else ""Unknown"",
            ""destination"": pkt.dst if hasattr(pkt, ""dst"") else ""Unknown"",
            ""details"": pkt.summary()
        }
    packets = sniff(count=100, timeout=10)
    packet_data = [packet_to_dict(pkt) for pkt in packets]
    return jsonify(packet_data)

@app.route('/file-scan', methods=['GET', 'POST'])
def file_scan():
    if 'user' not in session:
        flash('Please log in to access this feature.', 'error')
        return redirect(url_for('login'))

    result = None
    filename = None

    if request.method == 'POST':
        uploaded_file = request.files.get('file')
        if not uploaded_file:
            flash('No file uploaded!', 'error')
            return redirect(request.url)

        filename = uploaded_file.filename
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        uploaded_file.save(file_path)

        start_time = time.time()
        with open(file_path, 'rb') as f:
            upload_response = requests.post(
                'https://www.virustotal.com/api/v3/files',
                headers={'x-apikey': VT_API_KEY},
                files={'file': f}
            )

        if upload_response.status_code != 200:
            flash('Error uploading file to VirusTotal.', 'error')
            return redirect(request.url)

        file_id = upload_response.json()['data']['id']
        time.sleep(15)  # Let VT process the file

        report_response = requests.get(
            f'https://www.virustotal.com/api/v3/analyses/{file_id}',
            headers={'x-apikey': VT_API_KEY}
        )

        if report_response.status_code != 200:
            flash('Error retrieving scan report.', 'error')
            return redirect(request.url)

        scan_time = round(time.time() - start_time, 2)
        stats = report_response.json()['data']['attributes']['stats']
        total = stats['harmless'] + stats['malicious'] + stats['suspicious'] + stats['undetected'] + stats['timeout']
        threats = stats['malicious'] + stats['suspicious']
        threat_percentage = round((threats / total) * 100, 1) if total > 0 else 0
        verdict = ""✅ Safe"" if threat_percentage <= 10 else ""⚠️ Caution"" if threat_percentage <= 40 else ""🔥 Dangerous""

        result = {
            'harmless': stats['harmless'],
            'malicious': stats['malicious'],
            'suspicious': stats['suspicious'],
            'undetected': stats['undetected'],
            'timeout': stats['timeout'],
            'total': total,
            'scan_time': scan_time,
            'threat_percentage': threat_percentage,
            'verdict': verdict,
            'size': os.path.getsize(file_path),
            'type': uploaded_file.content_type,
            'hashes': get_file_hashes(file_path)
        }

    return render_template('fileScan.html', result=result, filename=filename)

if __name__ == '__main__':
    app.run(debug=True)
"
fileScan.html,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>File Malware Scanner</title>
    <link rel=""stylesheet"" href=""{{ url_for('static', filename='dashboard.css') }}"">
    <link rel=""stylesheet"" href=""{{ url_for('static', filename='styles.css') }}"">
</head>
<body>
<div class=""dashboard"">
    <div class=""sidebar"">
        <h2>Dashboard</h2>
        <ul>
            <li><a href=""{{ url_for('home') }}"">🏠 Home</a></li>
            <li><a href=""{{ url_for('scan_page') }}"">🔍 Port Scan</a></li>
            <li><a href=""{{ url_for('vscan_page') }}"">📡 Traffic Monitor</a></li>
            <li><a class=""active"" href=""{{ url_for('file_scan') }}"">🛡️ File Scanner</a></li>
            <li><a href=""{{ url_for('logout') }}"">🚪 Logout</a></li>
        </ul>
    </div>

    <div class=""main-content"">
        <div class=""header""><h1>🛡️ File Malware Scanner</h1></div>
        <main>
            <form method=""POST"" enctype=""multipart/form-data"">
                <label for=""file"">Select a file to scan:</label>
                <input type=""file"" name=""file"" id=""file"" required>
                <button type=""submit"">Scan File</button>
            </form>

            {% if result %}
            <div class=""results-box"">
                <h2>Scan Results for: <strong>{{ filename }}</strong></h2>
                <div class=""tabs"">
                    <button class=""tab-button active"" onclick=""switchTab(event, 'threat')"">🛡️ Threat Analysis</button>
                    <button class=""tab-button"" onclick=""switchTab(event, 'details')"">📁 File Details</button>
                </div>

                <div id=""threat"" class=""tab-content active-tab"">
                    <p><strong>Scan Time:</strong> {{ result.scan_time }} seconds</p>
                    <p><strong>Threat Level:</strong> {{ result.threat_percentage }}%</p>
                    <p><strong>Verdict:</strong> {{ result.verdict }}</p>
                    <table>
                        <tr><th>Category</th><th>Count</th></tr>
                        <tr><td>Harmless</td><td>{{ result.harmless }}</td></tr>
                        <tr><td>Malicious</td><td>{{ result.malicious }}</td></tr>
                        <tr><td>Suspicious</td><td>{{ result.suspicious }}</td></tr>
                        <tr><td>Undetected</td><td>{{ result.undetected }}</td></tr>
                        <tr><td>Timeout</td><td>{{ result.timeout }}</td></tr>
                        <tr><td>Total Scans</td><td>{{ result.total }}</td></tr>
                    </table>
                </div>

                <div id=""details"" class=""tab-content"">
                    <table>
                        <tr><td><strong>File Size</strong></td><td>{{ result.size }} bytes</td></tr>
                        <tr><td><strong>File Type</strong></td><td>{{ result.type }}</td></tr>
                        <tr><td><strong>MD5</strong></td><td>{{ result.hashes.md5 }}</td></tr>
                        <tr><td><strong>SHA-1</strong></td><td>{{ result.hashes.sha1 }}</td></tr>
                        <tr><td><strong>SHA-256</strong></td><td>{{ result.hashes.sha256 }}</td></tr>
                    </table>
                </div>
            </div>
            {% endif %}
        </main>
    </div>
</div>

<script>
function switchTab(evt, tabId) {
    const tabs = document.querySelectorAll('.tab-content');
    const buttons = document.querySelectorAll('.tab-button');
    tabs.forEach(t => t.classList.remove('active-tab'));
    buttons.forEach(b => b.classList.remove('active'));
    document.getElementById(tabId).classList.add('active-tab');
    evt.currentTarget.classList.add('active');
}
</script>
</body>
</html>
"
